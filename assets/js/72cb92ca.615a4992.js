"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[410],{15680:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>f});var r=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)t=c[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,c=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=s(t),d=o,f=p["".concat(u,".").concat(d)]||p[d]||b[d]||c;return t?r.createElement(f,a(a({ref:n},l),{},{components:t})):r.createElement(f,a({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var c=t.length,a=new Array(c);a[0]=d;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i[p]="string"==typeof e?e:o,a[1]=i;for(var s=2;s<c;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},13692:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>u,default:()=>f,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=t(58168),o=t(98587),c=(t(96540),t(15680)),a=["components"],i={title:"rucio-abacus-account"},u=void 0,s={unversionedId:"bin/rucio-abacus-account",id:"bin/rucio-abacus-account",title:"rucio-abacus-account",description:"",source:"@site/../docs/bin/rucio-abacus-account.md",sourceDirName:"bin",slug:"/bin/rucio-abacus-account",permalink:"/documentation/bin/rucio-abacus-account",draft:!1,editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/bin/rucio-abacus-account.md",tags:[],version:"current",frontMatter:{title:"rucio-abacus-account"},sidebar:"docs",previous:{title:"Notifications",permalink:"/documentation/operator/notifications"},next:{title:"rucio-abacus-collection-replica",permalink:"/documentation/bin/rucio-abacus-collection-replica"}},l={},p=[],b={toc:p},d="wrapper";function f(e){var n=e.components,t=(0,o.A)(e,a);return(0,c.yg)(d,(0,r.A)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,c.yg)("pre",null,(0,c.yg)("code",{parentName:"pre"},"usage: rucio-abacus-account [-h] [--run-once] [--threads THREADS]\n                            [--enable-history] [--sleep-time SLEEP_TIME]\n\nThe Abacus-Account daemon is responsible for updating account usages. It checks if there are new entries in the UpdatedAccountCounter table and updates the account counters in the AccountCounter table by adding or substrating the amount and size of files and recalculating the quotas.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --run-once            One iteration only\n  --threads THREADS     Concurrency control: total number of threads on this\n                        process\n  --enable-history      Record account usage into history table every hour.\n  --sleep-time SLEEP_TIME\n                        Concurrency control: thread sleep time after each\n                        chunk of work\n\nUpload a file::\n\n  $ rucio upload --rse MOCK --scope mock filename.txt\n\nCheck account usage::\n\n  $ rucio list-account-usage username\n  +-------+---------+---------+--------------+\n  | RSE   | USAGE   | LIMIT   | QUOTA LEFT   |\n  |-------+---------+---------+--------------|\n  +-------+---------+---------+--------------+\n\nRun the daemon::\n\n  $ rucio-abacus-account --run-once\n\nCheck account usage again::\n\n  $ rucio list-account-usage username\n  +-------+------------+---------+--------------+\n  | RSE   | USAGE      | LIMIT   | QUOTA LEFT   |\n  |-------+------------+---------+--------------|\n  | MOCK  | 211.724 kB | 0.000 B | 0.000 B      |\n  +-------+------------+---------+--------------+\n\n    \n")))}f.isMDXComponent=!0}}]);