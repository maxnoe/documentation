"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9085],{15680:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>f});var r=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=s(t),m=o,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(f,a(a({ref:n},l),{},{components:t})):r.createElement(f,a({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var c={};for(var u in n)hasOwnProperty.call(n,u)&&(c[u]=n[u]);c.originalType=e,c[p]="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},91872:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>u,default:()=>f,frontMatter:()=>c,metadata:()=>s,toc:()=>p});var r=t(58168),o=t(98587),i=(t(96540),t(15680)),a=["components"],c={title:"rucio-undertaker"},u=void 0,s={unversionedId:"bin/rucio-undertaker",id:"bin/rucio-undertaker",title:"rucio-undertaker",description:"",source:"@site/../docs/bin/rucio-undertaker.md",sourceDirName:"bin",slug:"/bin/rucio-undertaker",permalink:"/documentation/bin/rucio-undertaker",draft:!1,editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/bin/rucio-undertaker.md",tags:[],version:"current",frontMatter:{title:"rucio-undertaker"},sidebar:"docs",previous:{title:"rucio-transmogrifier",permalink:"/documentation/bin/rucio-transmogrifier"},next:{title:"rucio",permalink:"/documentation/bin/rucio"}},l={},p=[],d={toc:p},m="wrapper";function f(e){var n=e.components,t=(0,o.A)(e,a);return(0,i.yg)(m,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre"},"usage: rucio-undertaker [-h] [--run-once] [--total-workers TOTAL_WORKERS]\n                        [--chunk-size CHUNK_SIZE] [--sleep-time SLEEP_TIME]\n\nThe Undertaker daemon is responsible for managing expired DIDs. It deletes DIDs, but not replicas by checking if there are DIDs where the 'expired_at' date property is older than the current timestamp.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --run-once            One iteration only\n  --total-workers TOTAL_WORKERS\n                        Total number of workers\n  --chunk-size CHUNK_SIZE\n                        Chunk size\n  --sleep-time SLEEP_TIME\n                        Concurrency control: thread sleep time after each\n                        chunk of work\n\nCreate a DID that is already expired by setting its lifetime to -1::\n\n  $ python\n  from rucio.db.sqla.constants import DIDType\n  from rucio.client.didclient import DIDClient\n  client = DIDClient()\n  client.add_did(scope='mock', name='test', type=DIDType.DATASET, lifetime=-1)\n\nCheck if the DID exists::\n\n  $ rucio list-dids mock:test\n  +--------------+--------------+\n  | SCOPE:NAME   | [DID TYPE]   |\n  |--------------+--------------|\n  | mock:test    | DATASET      |\n  +--------------+--------------+\n\nRun the daemon::\n\n  $ rucio-undertaker --run-once\n\nCheck if the DID exists::\n\n  $ rucio list-dids mock:test\n  +--------------+--------------+\n  | SCOPE:NAME   | [DID TYPE]   |\n  |--------------+--------------|\n  +--------------+--------------+\n")))}f.isMDXComponent=!0}}]);