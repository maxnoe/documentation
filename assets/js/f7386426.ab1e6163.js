"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3941],{15680:(e,r,n)=>{n.d(r,{xA:()=>s,yg:()=>f});var t=n(96540);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function c(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?c(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function a(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},c=Object.keys(e);for(t=0;t<c.length;t++)n=c[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)n=c[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=t.createContext({}),l=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},s=function(e){var r=l(e.components);return t.createElement(u.Provider,{value:r},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},v=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,c=e.originalType,u=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),p=l(n),v=o,f=p["".concat(u,".").concat(v)]||p[v]||y[v]||c;return n?t.createElement(f,i(i({ref:r},s),{},{components:n})):t.createElement(f,i({ref:r},s))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var c=n.length,i=new Array(c);i[0]=v;var a={};for(var u in r)hasOwnProperty.call(r,u)&&(a[u]=r[u]);a.originalType=e,a[p]="string"==typeof e?e:o,i[1]=a;for(var l=2;l<c;l++)i[l]=n[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}v.displayName="MDXCreateElement"},22208:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>u,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var t=n(58168),o=n(98587),c=(n(96540),n(15680)),i=["components"],a={title:"rucio-conveyor-receiver"},u=void 0,l={unversionedId:"bin/rucio-conveyor-receiver",id:"bin/rucio-conveyor-receiver",title:"rucio-conveyor-receiver",description:"",source:"@site/../docs/bin/rucio-conveyor-receiver.md",sourceDirName:"bin",slug:"/bin/rucio-conveyor-receiver",permalink:"/documentation/bin/rucio-conveyor-receiver",draft:!1,editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/bin/rucio-conveyor-receiver.md",tags:[],version:"current",frontMatter:{title:"rucio-conveyor-receiver"},sidebar:"docs",previous:{title:"rucio-conveyor-preparer",permalink:"/documentation/bin/rucio-conveyor-preparer"},next:{title:"rucio-conveyor-stager",permalink:"/documentation/bin/rucio-conveyor-stager"}},s={},p=[],y={toc:p},v="wrapper";function f(e){var r=e.components,n=(0,o.A)(e,i);return(0,c.yg)(v,(0,t.A)({},y,n,{components:r,mdxType:"MDXLayout"}),(0,c.yg)("pre",null,(0,c.yg)("code",{parentName:"pre"},"usage: rucio-conveyor-receiver [-h] [--run-once]\n                               [--total-threads TOTAL_THREADS]\n\nConveyor is a daemon to manage file transfers. The conveyor-receiver is\nsimilar to conveyor-poller, but instead of poll the transfer tool, conveyor-\nreceiver gets knowledge about the state of submitted transfers by listening to\nthe transfer tool messages.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --run-once            One iteration only\n  --total-threads TOTAL_THREADS\n                        Concurrency control: total number of threads per\n                        process\n")))}f.isMDXComponent=!0}}]);